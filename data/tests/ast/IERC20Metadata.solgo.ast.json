{
  "id": 346,
  "license": "MIT",
  "absolute_path": "IERC20Metadata.sol",
  "exported_symbols": [
    {
      "id": 277,
      "name": "IERC20",
      "absolute_path": "IERC20.sol"
    },
    {
      "id": 351,
      "name": "IERC20Metadata",
      "absolute_path": "IERC20Metadata.sol"
    }
  ],
  "node_type": 1,
  "root": {
    "nodes": [
      {
        "id": 349,
        "node_type": 10,
        "src": {
          "line": 318,
          "start": 9937,
          "end": 9959,
          "length": 23,
          "parent_index": 346
        },
        "literals": [
          "pragma",
          "solidity",
          "^",
          "0",
          ".",
          "8",
          ".",
          "0",
          ";"
        ]
      },
      {
        "id": 350,
        "node_type": 29,
        "src": {
          "line": 320,
          "start": 9962,
          "end": 9984,
          "length": 23,
          "parent_index": 346
        },
        "absolute_path": "IERC20.sol",
        "file": "../IERC20.sol",
        "scope": 346,
        "source_unit": 273
      },
      {
        "id": 351,
        "name": "IERC20Metadata",
        "node_type": 58,
        "src": {
          "line": 327,
          "start": 10104,
          "end": 10508,
          "length": 405,
          "parent_index": 346
        },
        "kind": 38,
        "linearized_base_contracts": [
          351,
          273
        ],
        "nodes": [
          {
            "id": 354,
            "name": "name",
            "node_type": 42,
            "src": {
              "line": 331,
              "start": 10204,
              "end": 10257,
              "length": 54,
              "parent_index": 351
            },
            "kind": 41,
            "visibility": 4,
            "state_mutability": 1,
            "parameters": {
              "id": 355,
              "node_type": 43,
              "parameters": [
                {
                  "id": 356,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 354,
                  "src": {
                    "line": 331,
                    "column": 43,
                    "start": 10243,
                    "end": 10255,
                    "length": 13,
                    "parent_index": 355
                  },
                  "type_name": {
                    "id": 357,
                    "name": "string",
                    "node_type": 30,
                    "src": {
                      "line": 331,
                      "column": 43,
                      "start": 10243,
                      "end": 10255,
                      "length": 13,
                      "parent_index": 355
                    },
                    "type_descriptions": {
                      "type_identifier": "t_string",
                      "type_string": "string"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 331,
                "start": 10243,
                "end": 10255,
                "length": 13,
                "parent_index": 354
              }
            },
            "return_parameters": {
              "id": 358,
              "node_type": 43,
              "parameters": [
                {
                  "id": 359,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 354,
                  "src": {
                    "line": 331,
                    "column": 43,
                    "start": 10243,
                    "end": 10255,
                    "length": 13,
                    "parent_index": 358
                  },
                  "type_name": {
                    "id": 360,
                    "name": "string",
                    "node_type": 30,
                    "src": {
                      "line": 331,
                      "column": 43,
                      "start": 10243,
                      "end": 10255,
                      "length": 13,
                      "parent_index": 358
                    },
                    "type_descriptions": {
                      "type_identifier": "t_string",
                      "type_string": "string"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 331,
                "start": 10243,
                "end": 10255,
                "length": 13,
                "parent_index": 354
              }
            }
          },
          {
            "id": 361,
            "name": "symbol",
            "node_type": 42,
            "src": {
              "line": 336,
              "start": 10325,
              "end": 10380,
              "length": 56,
              "parent_index": 351
            },
            "kind": 41,
            "visibility": 4,
            "state_mutability": 1,
            "parameters": {
              "id": 362,
              "node_type": 43,
              "parameters": [
                {
                  "id": 363,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 361,
                  "src": {
                    "line": 336,
                    "column": 45,
                    "start": 10366,
                    "end": 10378,
                    "length": 13,
                    "parent_index": 362
                  },
                  "type_name": {
                    "id": 364,
                    "name": "string",
                    "node_type": 30,
                    "src": {
                      "line": 336,
                      "column": 45,
                      "start": 10366,
                      "end": 10378,
                      "length": 13,
                      "parent_index": 362
                    },
                    "type_descriptions": {
                      "type_identifier": "t_string",
                      "type_string": "string"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 336,
                "start": 10366,
                "end": 10378,
                "length": 13,
                "parent_index": 361
              }
            },
            "return_parameters": {
              "id": 365,
              "node_type": 43,
              "parameters": [
                {
                  "id": 366,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 361,
                  "src": {
                    "line": 336,
                    "column": 45,
                    "start": 10366,
                    "end": 10378,
                    "length": 13,
                    "parent_index": 365
                  },
                  "type_name": {
                    "id": 367,
                    "name": "string",
                    "node_type": 30,
                    "src": {
                      "line": 336,
                      "column": 45,
                      "start": 10366,
                      "end": 10378,
                      "length": 13,
                      "parent_index": 365
                    },
                    "type_descriptions": {
                      "type_identifier": "t_string",
                      "type_string": "string"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 336,
                "start": 10366,
                "end": 10378,
                "length": 13,
                "parent_index": 361
              }
            }
          },
          {
            "id": 368,
            "name": "decimals",
            "node_type": 42,
            "src": {
              "line": 341,
              "start": 10457,
              "end": 10506,
              "length": 50,
              "parent_index": 351
            },
            "kind": 41,
            "visibility": 4,
            "state_mutability": 1,
            "parameters": {
              "id": 369,
              "node_type": 43,
              "parameters": [
                {
                  "id": 370,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 368,
                  "src": {
                    "line": 341,
                    "column": 47,
                    "start": 10500,
                    "end": 10504,
                    "length": 5,
                    "parent_index": 369
                  },
                  "type_name": {
                    "id": 371,
                    "name": "uint8",
                    "node_type": 30,
                    "src": {
                      "line": 341,
                      "column": 47,
                      "start": 10500,
                      "end": 10504,
                      "length": 5,
                      "parent_index": 369
                    },
                    "type_descriptions": {
                      "type_identifier": "t_uint8",
                      "type_string": "uint8"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 341,
                "start": 10500,
                "end": 10504,
                "length": 5,
                "parent_index": 368
              }
            },
            "return_parameters": {
              "id": 372,
              "node_type": 43,
              "parameters": [
                {
                  "id": 373,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 368,
                  "src": {
                    "line": 341,
                    "column": 47,
                    "start": 10500,
                    "end": 10504,
                    "length": 5,
                    "parent_index": 372
                  },
                  "type_name": {
                    "id": 374,
                    "name": "uint8",
                    "node_type": 30,
                    "src": {
                      "line": 341,
                      "column": 47,
                      "start": 10500,
                      "end": 10504,
                      "length": 5,
                      "parent_index": 372
                    },
                    "type_descriptions": {
                      "type_identifier": "t_uint8",
                      "type_string": "uint8"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 341,
                "start": 10500,
                "end": 10504,
                "length": 5,
                "parent_index": 368
              }
            }
          }
        ],
        "contract_dependencies": [
          273
        ],
        "base_contracts": [
          {
            "id": 352,
            "node_type": 62,
            "base_name": {
              "id": 353,
              "name": "IERC20",
              "node_type": 52,
              "referenced_declaration": 273,
              "src": {
                "line": 327,
                "column": 28,
                "start": 10132,
                "end": 10137,
                "length": 6,
                "parent_index": 351
              }
            },
            "src": {
              "line": 327,
              "column": 28,
              "start": 10132,
              "end": 10137,
              "length": 6,
              "parent_index": 351
            }
          }
        ]
      }
    ]
  },
  "src": {
    "line": 327,
    "start": 10104
  },
  "comments": [
    {
      "node_type": 33,
      "src": {
        "line": 1,
        "end": 30,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 1,
      "node_type": 32,
      "src": {
        "line": 5,
        "start": 58,
        "end": 620,
        "length": 563,
        "parent_index": 1
      },
      "value": "/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */"
    },
    {
      "id": 2,
      "node_type": 32,
      "src": {
        "line": 19,
        "column": 4,
        "start": 645,
        "end": 775,
        "length": 131,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 3,
      "node_type": 32,
      "src": {
        "line": 32,
        "column": 4,
        "start": 1003,
        "end": 1137,
        "length": 135,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 4,
      "node_type": 32,
      "src": {
        "line": 44,
        "column": 4,
        "start": 1338,
        "end": 1474,
        "length": 137,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 5,
      "node_type": 31,
      "src": {
        "line": 51,
        "column": 12,
        "start": 1590,
        "end": 1668,
        "length": 79,
        "parent_index": 1
      },
      "value": "// Gas optimization: this is cheaper than requiring 'a' not being zero, but the"
    },
    {
      "id": 6,
      "node_type": 31,
      "src": {
        "line": 52,
        "column": 12,
        "start": 1682,
        "end": 1722,
        "length": 41,
        "parent_index": 1
      },
      "value": "// benefit is lost if 'b' is also tested."
    },
    {
      "id": 7,
      "node_type": 31,
      "src": {
        "line": 53,
        "column": 12,
        "start": 1736,
        "end": 1806,
        "length": 71,
        "parent_index": 1
      },
      "value": "// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522"
    },
    {
      "id": 8,
      "node_type": 32,
      "src": {
        "line": 61,
        "column": 4,
        "start": 1979,
        "end": 2116,
        "length": 138,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 9,
      "node_type": 32,
      "src": {
        "line": 73,
        "column": 4,
        "start": 2318,
        "end": 2465,
        "length": 148,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 10,
      "node_type": 32,
      "src": {
        "line": 85,
        "column": 4,
        "start": 2667,
        "end": 2890,
        "length": 224,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */"
    },
    {
      "id": 11,
      "node_type": 32,
      "src": {
        "line": 99,
        "column": 4,
        "start": 2998,
        "end": 3257,
        "length": 260,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */"
    },
    {
      "id": 12,
      "node_type": 32,
      "src": {
        "line": 113,
        "column": 4,
        "start": 3365,
        "end": 3600,
        "length": 236,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */"
    },
    {
      "id": 13,
      "node_type": 32,
      "src": {
        "line": 127,
        "column": 4,
        "start": 3708,
        "end": 4160,
        "length": 453,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 14,
      "node_type": 32,
      "src": {
        "line": 143,
        "column": 4,
        "start": 4268,
        "end": 4709,
        "length": 442,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 15,
      "node_type": 32,
      "src": {
        "line": 159,
        "column": 4,
        "start": 4817,
        "end": 5269,
        "length": 453,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */"
    },
    {
      "id": 16,
      "node_type": 32,
      "src": {
        "line": 183,
        "column": 4,
        "start": 5512,
        "end": 5984,
        "length": 473,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 17,
      "node_type": 32,
      "src": {
        "line": 206,
        "column": 4,
        "start": 6226,
        "end": 6860,
        "length": 635,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 18,
      "node_type": 33,
      "src": {
        "line": 233,
        "start": 7100,
        "end": 7130,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 19,
      "node_type": 32,
      "src": {
        "line": 237,
        "start": 7158,
        "end": 7227,
        "length": 70,
        "parent_index": 1
      },
      "value": "/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */"
    },
    {
      "id": 20,
      "node_type": 32,
      "src": {
        "line": 241,
        "column": 4,
        "start": 7252,
        "end": 7317,
        "length": 66,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the amount of tokens in existence.\n     */"
    },
    {
      "id": 21,
      "node_type": 32,
      "src": {
        "line": 246,
        "column": 4,
        "start": 7384,
        "end": 7455,
        "length": 72,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the amount of tokens owned by `account`.\n     */"
    },
    {
      "id": 22,
      "node_type": 32,
      "src": {
        "line": 251,
        "column": 4,
        "start": 7535,
        "end": 7743,
        "length": 209,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */"
    },
    {
      "id": 23,
      "node_type": 32,
      "src": {
        "line": 260,
        "column": 4,
        "start": 7832,
        "end": 8095,
        "length": 264,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */"
    },
    {
      "id": 24,
      "node_type": 32,
      "src": {
        "line": 269,
        "column": 4,
        "start": 8190,
        "end": 8831,
        "length": 642,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race condition\n     * is to first reduce the spender's allowance to 0 and set the desired value\n     * afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */"
    },
    {
      "id": 25,
      "node_type": 32,
      "src": {
        "line": 285,
        "column": 4,
        "start": 8917,
        "end": 9212,
        "length": 296,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */"
    },
    {
      "id": 26,
      "node_type": 32,
      "src": {
        "line": 300,
        "column": 4,
        "start": 9351,
        "end": 9508,
        "length": 158,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */"
    },
    {
      "id": 27,
      "node_type": 32,
      "src": {
        "line": 308,
        "column": 4,
        "start": 9592,
        "end": 9739,
        "length": 148,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */"
    },
    {
      "id": 28,
      "node_type": 33,
      "src": {
        "line": 315,
        "start": 9827,
        "end": 9857,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 29,
      "node_type": 31,
      "src": {
        "line": 316,
        "start": 9859,
        "end": 9934,
        "length": 76,
        "parent_index": 1
      },
      "value": "// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)"
    },
    {
      "id": 30,
      "node_type": 32,
      "src": {
        "line": 322,
        "start": 9987,
        "end": 10102,
        "length": 116,
        "parent_index": 1
      },
      "value": "/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */"
    },
    {
      "id": 31,
      "node_type": 32,
      "src": {
        "line": 328,
        "column": 4,
        "start": 10145,
        "end": 10198,
        "length": 54,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the name of the token.\n     */"
    },
    {
      "id": 32,
      "node_type": 32,
      "src": {
        "line": 333,
        "column": 4,
        "start": 10264,
        "end": 10319,
        "length": 56,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the symbol of the token.\n     */"
    },
    {
      "id": 33,
      "node_type": 32,
      "src": {
        "line": 338,
        "column": 4,
        "start": 10387,
        "end": 10451,
        "length": 65,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the decimals places of the token.\n     */"
    }
  ]
}