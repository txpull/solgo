{
  "id": 383,
  "license": "MIT",
  "name": "Context",
  "absolute_path": "Context.sol",
  "exported_symbols": [
    {
      "id": 389,
      "name": "Context",
      "absolute_path": "Context.sol"
    }
  ],
  "node_type": 1,
  "root": {
    "nodes": [
      {
        "id": 387,
        "node_type": 10,
        "src": {
          "line": 347,
          "start": 10597,
          "end": 10619,
          "length": 23,
          "parent_index": 383
        },
        "literals": [
          "pragma",
          "solidity",
          "^",
          "0",
          ".",
          "8",
          ".",
          "0",
          ";"
        ]
      },
      {
        "id": 389,
        "name": "Context",
        "node_type": 35,
        "src": {
          "line": 359,
          "start": 11119,
          "end": 11353,
          "length": 235,
          "parent_index": 383
        },
        "abstract": true,
        "kind": 36,
        "fully_implemented": true,
        "linearized_base_contracts": [
          389
        ],
        "nodes": [
          {
            "id": 390,
            "name": "_msgSender",
            "node_type": 42,
            "src": {
              "line": 360,
              "start": 11151,
              "end": 11246,
              "length": 96,
              "parent_index": 389
            },
            "kind": 41,
            "implemented": true,
            "visibility": 1,
            "state_mutability": 5,
            "virtual": true,
            "parameters": {
              "id": 391,
              "node_type": 43,
              "parameters": [
                {
                  "id": 392,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 390,
                  "src": {
                    "line": 360,
                    "column": 57,
                    "start": 11204,
                    "end": 11210,
                    "length": 7,
                    "parent_index": 391
                  },
                  "type_name": {
                    "id": 393,
                    "name": "address",
                    "node_type": 30,
                    "src": {
                      "line": 360,
                      "column": 57,
                      "start": 11204,
                      "end": 11210,
                      "length": 7,
                      "parent_index": 391
                    },
                    "type_descriptions": {
                      "type_identifier": "t_address",
                      "type_string": "address"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 360,
                "start": 11204,
                "end": 11210,
                "length": 7,
                "parent_index": 390
              }
            },
            "return_parameters": {
              "id": 394,
              "node_type": 43,
              "parameters": [
                {
                  "id": 395,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 390,
                  "src": {
                    "line": 360,
                    "column": 57,
                    "start": 11204,
                    "end": 11210,
                    "length": 7,
                    "parent_index": 394
                  },
                  "type_name": {
                    "id": 396,
                    "name": "address",
                    "node_type": 30,
                    "src": {
                      "line": 360,
                      "column": 57,
                      "start": 11204,
                      "end": 11210,
                      "length": 7,
                      "parent_index": 394
                    },
                    "type_descriptions": {
                      "type_identifier": "t_address",
                      "type_string": "address"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 360,
                "start": 11204,
                "end": 11210,
                "length": 7,
                "parent_index": 390
              }
            },
            "body": {
              "id": 397,
              "node_type": 46,
              "src": {
                "line": 360,
                "column": 66,
                "start": 11213,
                "end": 11246,
                "length": 34,
                "parent_index": 390
              },
              "statements": [
                {
                  "id": 398,
                  "node_type": 47,
                  "src": {
                    "line": 361,
                    "column": 8,
                    "start": 11223,
                    "end": 11240,
                    "length": 18,
                    "parent_index": 397
                  },
                  "expression": {
                    "id": 399,
                    "name": "msg.sender",
                    "node_type": 23,
                    "src": {
                      "line": 361,
                      "column": 15,
                      "start": 11230,
                      "end": 11239,
                      "length": 9,
                      "parent_index": 398
                    },
                    "type_descriptions": {
                      "type_identifier": "t_address",
                      "type_string": "address"
                    },
                    "expression": {
                      "id": 400,
                      "name": "msg",
                      "node_type": 16,
                      "src": {
                        "line": 361,
                        "column": 15,
                        "start": 11230,
                        "end": 11232,
                        "length": 2,
                        "parent_index": 399
                      },
                      "type_descriptions": {
                        "type_identifier": "t_magic_message",
                        "type_string": "msg"
                      }
                    },
                    "member_name": "sender"
                  },
                  "function_return_parameters": 394
                }
              ]
            }
          },
          {
            "id": 401,
            "name": "_msgData",
            "node_type": 42,
            "src": {
              "line": 364,
              "start": 11253,
              "end": 11351,
              "length": 99,
              "parent_index": 389
            },
            "kind": 41,
            "implemented": true,
            "visibility": 1,
            "state_mutability": 5,
            "virtual": true,
            "parameters": {
              "id": 402,
              "node_type": 43,
              "parameters": [
                {
                  "id": 403,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 401,
                  "src": {
                    "line": 364,
                    "column": 55,
                    "start": 11304,
                    "end": 11317,
                    "length": 14,
                    "parent_index": 402
                  },
                  "storage_location": 4,
                  "type_name": {
                    "id": 404,
                    "name": "bytes",
                    "node_type": 30,
                    "src": {
                      "line": 364,
                      "column": 55,
                      "start": 11304,
                      "end": 11317,
                      "length": 14,
                      "parent_index": 402
                    },
                    "type_descriptions": {
                      "type_identifier": "t_bytes",
                      "type_string": "bytes"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 364,
                "start": 11304,
                "end": 11317,
                "length": 14,
                "parent_index": 401
              }
            },
            "return_parameters": {
              "id": 405,
              "node_type": 43,
              "parameters": [
                {
                  "id": 406,
                  "mutability": 1,
                  "node_type": 30,
                  "scope": 401,
                  "src": {
                    "line": 364,
                    "column": 55,
                    "start": 11304,
                    "end": 11317,
                    "length": 14,
                    "parent_index": 405
                  },
                  "storage_location": 4,
                  "type_name": {
                    "id": 407,
                    "name": "bytes",
                    "node_type": 30,
                    "src": {
                      "line": 364,
                      "column": 55,
                      "start": 11304,
                      "end": 11317,
                      "length": 14,
                      "parent_index": 405
                    },
                    "type_descriptions": {
                      "type_identifier": "t_bytes",
                      "type_string": "bytes"
                    }
                  },
                  "visibility": 1
                }
              ],
              "src": {
                "line": 364,
                "start": 11304,
                "end": 11317,
                "length": 14,
                "parent_index": 401
              }
            },
            "body": {
              "id": 408,
              "node_type": 46,
              "src": {
                "line": 364,
                "column": 71,
                "start": 11320,
                "end": 11351,
                "length": 32,
                "parent_index": 401
              },
              "statements": [
                {
                  "id": 409,
                  "node_type": 47,
                  "src": {
                    "line": 365,
                    "column": 8,
                    "start": 11330,
                    "end": 11345,
                    "length": 16,
                    "parent_index": 408
                  },
                  "expression": {
                    "id": 410,
                    "name": "msg.data",
                    "node_type": 23,
                    "src": {
                      "line": 365,
                      "column": 15,
                      "start": 11337,
                      "end": 11344,
                      "length": 7,
                      "parent_index": 409
                    },
                    "type_descriptions": {
                      "type_identifier": "t_bytes_calldata_ptr",
                      "type_string": "bytes calldata"
                    },
                    "expression": {
                      "id": 411,
                      "name": "msg",
                      "node_type": 16,
                      "src": {
                        "line": 365,
                        "column": 15,
                        "start": 11337,
                        "end": 11339,
                        "length": 2,
                        "parent_index": 410
                      },
                      "type_descriptions": {
                        "type_identifier": "t_magic_message",
                        "type_string": "msg"
                      }
                    },
                    "member_name": "data"
                  },
                  "function_return_parameters": 405
                }
              ]
            }
          }
        ]
      }
    ]
  },
  "src": {
    "line": 359,
    "start": 11119
  },
  "comments": [
    {
      "node_type": 33,
      "src": {
        "line": 1,
        "end": 30,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 1,
      "node_type": 32,
      "src": {
        "line": 5,
        "start": 58,
        "end": 620,
        "length": 563,
        "parent_index": 1
      },
      "value": "/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */"
    },
    {
      "id": 2,
      "node_type": 32,
      "src": {
        "line": 19,
        "column": 4,
        "start": 645,
        "end": 775,
        "length": 131,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 3,
      "node_type": 32,
      "src": {
        "line": 32,
        "column": 4,
        "start": 1003,
        "end": 1137,
        "length": 135,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 4,
      "node_type": 32,
      "src": {
        "line": 44,
        "column": 4,
        "start": 1338,
        "end": 1474,
        "length": 137,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 5,
      "node_type": 31,
      "src": {
        "line": 51,
        "column": 12,
        "start": 1590,
        "end": 1668,
        "length": 79,
        "parent_index": 1
      },
      "value": "// Gas optimization: this is cheaper than requiring 'a' not being zero, but the"
    },
    {
      "id": 6,
      "node_type": 31,
      "src": {
        "line": 52,
        "column": 12,
        "start": 1682,
        "end": 1722,
        "length": 41,
        "parent_index": 1
      },
      "value": "// benefit is lost if 'b' is also tested."
    },
    {
      "id": 7,
      "node_type": 31,
      "src": {
        "line": 53,
        "column": 12,
        "start": 1736,
        "end": 1806,
        "length": 71,
        "parent_index": 1
      },
      "value": "// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522"
    },
    {
      "id": 8,
      "node_type": 32,
      "src": {
        "line": 61,
        "column": 4,
        "start": 1979,
        "end": 2116,
        "length": 138,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 9,
      "node_type": 32,
      "src": {
        "line": 73,
        "column": 4,
        "start": 2318,
        "end": 2465,
        "length": 148,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */"
    },
    {
      "id": 10,
      "node_type": 32,
      "src": {
        "line": 85,
        "column": 4,
        "start": 2667,
        "end": 2890,
        "length": 224,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */"
    },
    {
      "id": 11,
      "node_type": 32,
      "src": {
        "line": 99,
        "column": 4,
        "start": 2998,
        "end": 3257,
        "length": 260,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */"
    },
    {
      "id": 12,
      "node_type": 32,
      "src": {
        "line": 113,
        "column": 4,
        "start": 3365,
        "end": 3600,
        "length": 236,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */"
    },
    {
      "id": 13,
      "node_type": 32,
      "src": {
        "line": 127,
        "column": 4,
        "start": 3708,
        "end": 4160,
        "length": 453,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 14,
      "node_type": 32,
      "src": {
        "line": 143,
        "column": 4,
        "start": 4268,
        "end": 4709,
        "length": 442,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 15,
      "node_type": 32,
      "src": {
        "line": 159,
        "column": 4,
        "start": 4817,
        "end": 5269,
        "length": 453,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */"
    },
    {
      "id": 16,
      "node_type": 32,
      "src": {
        "line": 183,
        "column": 4,
        "start": 5512,
        "end": 5984,
        "length": 473,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 17,
      "node_type": 32,
      "src": {
        "line": 206,
        "column": 4,
        "start": 6226,
        "end": 6860,
        "length": 635,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */"
    },
    {
      "id": 18,
      "node_type": 33,
      "src": {
        "line": 233,
        "start": 7100,
        "end": 7130,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 19,
      "node_type": 32,
      "src": {
        "line": 237,
        "start": 7158,
        "end": 7227,
        "length": 70,
        "parent_index": 1
      },
      "value": "/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */"
    },
    {
      "id": 20,
      "node_type": 32,
      "src": {
        "line": 241,
        "column": 4,
        "start": 7252,
        "end": 7317,
        "length": 66,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the amount of tokens in existence.\n     */"
    },
    {
      "id": 21,
      "node_type": 32,
      "src": {
        "line": 246,
        "column": 4,
        "start": 7384,
        "end": 7455,
        "length": 72,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the amount of tokens owned by `account`.\n     */"
    },
    {
      "id": 22,
      "node_type": 32,
      "src": {
        "line": 251,
        "column": 4,
        "start": 7535,
        "end": 7743,
        "length": 209,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */"
    },
    {
      "id": 23,
      "node_type": 32,
      "src": {
        "line": 260,
        "column": 4,
        "start": 7832,
        "end": 8095,
        "length": 264,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */"
    },
    {
      "id": 24,
      "node_type": 32,
      "src": {
        "line": 269,
        "column": 4,
        "start": 8190,
        "end": 8831,
        "length": 642,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race condition\n     * is to first reduce the spender's allowance to 0 and set the desired value\n     * afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */"
    },
    {
      "id": 25,
      "node_type": 32,
      "src": {
        "line": 285,
        "column": 4,
        "start": 8917,
        "end": 9212,
        "length": 296,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */"
    },
    {
      "id": 26,
      "node_type": 32,
      "src": {
        "line": 300,
        "column": 4,
        "start": 9351,
        "end": 9508,
        "length": 158,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */"
    },
    {
      "id": 27,
      "node_type": 32,
      "src": {
        "line": 308,
        "column": 4,
        "start": 9592,
        "end": 9739,
        "length": 148,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */"
    },
    {
      "id": 28,
      "node_type": 33,
      "src": {
        "line": 315,
        "start": 9827,
        "end": 9857,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 29,
      "node_type": 31,
      "src": {
        "line": 316,
        "start": 9859,
        "end": 9934,
        "length": 76,
        "parent_index": 1
      },
      "value": "// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)"
    },
    {
      "id": 30,
      "node_type": 32,
      "src": {
        "line": 322,
        "start": 9987,
        "end": 10102,
        "length": 116,
        "parent_index": 1
      },
      "value": "/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */"
    },
    {
      "id": 31,
      "node_type": 32,
      "src": {
        "line": 328,
        "column": 4,
        "start": 10145,
        "end": 10198,
        "length": 54,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the name of the token.\n     */"
    },
    {
      "id": 32,
      "node_type": 32,
      "src": {
        "line": 333,
        "column": 4,
        "start": 10264,
        "end": 10319,
        "length": 56,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the symbol of the token.\n     */"
    },
    {
      "id": 33,
      "node_type": 32,
      "src": {
        "line": 338,
        "column": 4,
        "start": 10387,
        "end": 10451,
        "length": 65,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the decimals places of the token.\n     */"
    },
    {
      "id": 34,
      "node_type": 33,
      "src": {
        "line": 344,
        "start": 10511,
        "end": 10541,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 35,
      "node_type": 31,
      "src": {
        "line": 345,
        "start": 10543,
        "end": 10594,
        "length": 52,
        "parent_index": 1
      },
      "value": "// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)"
    },
    {
      "id": 36,
      "node_type": 32,
      "src": {
        "line": 349,
        "start": 10622,
        "end": 11117,
        "length": 496,
        "parent_index": 1
      },
      "value": "/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */"
    },
    {
      "id": 37,
      "node_type": 33,
      "src": {
        "line": 369,
        "start": 11356,
        "end": 11386,
        "length": 31,
        "parent_index": 1
      },
      "value": "// SPDX-License-Identifier: MIT"
    },
    {
      "id": 38,
      "node_type": 31,
      "src": {
        "line": 370,
        "start": 11388,
        "end": 11458,
        "length": 71,
        "parent_index": 1
      },
      "value": "// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)"
    },
    {
      "id": 39,
      "node_type": 32,
      "src": {
        "line": 378,
        "start": 11565,
        "end": 12865,
        "length": 1301,
        "parent_index": 1
      },
      "value": "/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */"
    },
    {
      "id": 40,
      "node_type": 32,
      "src": {
        "line": 416,
        "column": 4,
        "start": 13139,
        "end": 13309,
        "length": 171,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */"
    },
    {
      "id": 41,
      "node_type": 32,
      "src": {
        "line": 427,
        "column": 4,
        "start": 13434,
        "end": 13487,
        "length": 54,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the name of the token.\n     */"
    },
    {
      "id": 42,
      "node_type": 32,
      "src": {
        "line": 434,
        "column": 4,
        "start": 13597,
        "end": 13698,
        "length": 102,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */"
    },
    {
      "id": 43,
      "node_type": 32,
      "src": {
        "line": 442,
        "column": 4,
        "start": 13812,
        "end": 14433,
        "length": 622,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */"
    },
    {
      "id": 44,
      "node_type": 32,
      "src": {
        "line": 459,
        "column": 4,
        "start": 14536,
        "end": 14584,
        "length": 49,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-totalSupply}.\n     */"
    },
    {
      "id": 45,
      "node_type": 32,
      "src": {
        "line": 466,
        "column": 4,
        "start": 14702,
        "end": 14748,
        "length": 47,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-balanceOf}.\n     */"
    },
    {
      "id": 46,
      "node_type": 32,
      "src": {
        "line": 473,
        "column": 4,
        "start": 14885,
        "end": 15069,
        "length": 185,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */"
    },
    {
      "id": 47,
      "node_type": 32,
      "src": {
        "line": 487,
        "column": 4,
        "start": 15270,
        "end": 15316,
        "length": 47,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-allowance}.\n     */"
    },
    {
      "id": 48,
      "node_type": 32,
      "src": {
        "line": 494,
        "column": 4,
        "start": 15477,
        "end": 15773,
        "length": 297,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */"
    },
    {
      "id": 49,
      "node_type": 32,
      "src": {
        "line": 510,
        "column": 4,
        "start": 15982,
        "end": 16532,
        "length": 551,
        "parent_index": 1
      },
      "value": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */"
    },
    {
      "id": 50,
      "node_type": 32,
      "src": {
        "line": 533,
        "column": 4,
        "start": 16800,
        "end": 17183,
        "length": 384,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */"
    },
    {
      "id": 51,
      "node_type": 32,
      "src": {
        "line": 551,
        "column": 4,
        "start": 17429,
        "end": 17904,
        "length": 476,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */"
    },
    {
      "id": 52,
      "node_type": 32,
      "src": {
        "line": 576,
        "column": 4,
        "start": 18343,
        "end": 18785,
        "length": 443,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */"
    },
    {
      "id": 53,
      "node_type": 31,
      "src": {
        "line": 600,
        "column": 12,
        "start": 19286,
        "end": 19388,
        "length": 103,
        "parent_index": 1
      },
      "value": "// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by"
    },
    {
      "id": 54,
      "node_type": 31,
      "src": {
        "line": 601,
        "column": 12,
        "start": 19402,
        "end": 19435,
        "length": 34,
        "parent_index": 1
      },
      "value": "// decrementing then incrementing."
    },
    {
      "id": 55,
      "node_type": 32,
      "src": {
        "line": 610,
        "column": 4,
        "start": 19585,
        "end": 19849,
        "length": 265,
        "parent_index": 1
      },
      "value": "/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */"
    },
    {
      "id": 56,
      "node_type": 31,
      "src": {
        "line": 626,
        "column": 12,
        "start": 20122,
        "end": 20220,
        "length": 99,
        "parent_index": 1
      },
      "value": "// Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above."
    },
    {
      "id": 57,
      "node_type": 32,
      "src": {
        "line": 634,
        "column": 4,
        "start": 20396,
        "end": 20704,
        "length": 309,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */"
    },
    {
      "id": 58,
      "node_type": 31,
      "src": {
        "line": 654,
        "column": 12,
        "start": 21139,
        "end": 21204,
        "length": 66,
        "parent_index": 1
      },
      "value": "// Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply."
    },
    {
      "id": 59,
      "node_type": 32,
      "src": {
        "line": 663,
        "column": 4,
        "start": 21375,
        "end": 21786,
        "length": 412,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */"
    },
    {
      "id": 60,
      "node_type": 32,
      "src": {
        "line": 684,
        "column": 4,
        "start": 22138,
        "end": 22407,
        "length": 270,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */"
    },
    {
      "id": 61,
      "node_type": 32,
      "src": {
        "line": 702,
        "column": 4,
        "start": 22830,
        "end": 23402,
        "length": 573,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */"
    },
    {
      "id": 62,
      "node_type": 32,
      "src": {
        "line": 718,
        "column": 4,
        "start": 23505,
        "end": 24081,
        "length": 577,
        "parent_index": 1
      },
      "value": "/**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */"
    }
  ]
}