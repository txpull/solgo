package opcode

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestStringToOp(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected OpCode
	}{
		{"STOP", "STOP", STOP},
		{"ADD", "ADD", ADD},
		{"MUL", "MUL", MUL},
		{"SUB", "SUB", SUB},
		{"DIV", "DIV", DIV},
		{"SDIV", "SDIV", SDIV},
		{"MOD", "MOD", MOD},
		{"SMOD", "SMOD", SMOD},
		{"EXP", "EXP", EXP},
		{"NOT", "NOT", NOT},
		{"LT", "LT", LT},
		{"GT", "GT", GT},
		{"SLT", "SLT", SLT},
		{"SGT", "SGT", SGT},
		{"EQ", "EQ", EQ},
		{"ISZERO", "ISZERO", ISZERO},
		{"SIGNEXTEND", "SIGNEXTEND", SIGNEXTEND},
		{"AND", "AND", AND},
		{"OR", "OR", OR},
		{"XOR", "XOR", XOR},
		{"BYTE", "BYTE", BYTE},
		{"SHL", "SHL", SHL},
		{"SHR", "SHR", SHR},
		{"SAR", "SAR", SAR},
		{"ADDMOD", "ADDMOD", ADDMOD},
		{"MULMOD", "MULMOD", MULMOD},
		{"KECCAK256", "KECCAK256", KECCAK256},
		{"ADDRESS", "ADDRESS", ADDRESS},
		{"BALANCE", "BALANCE", BALANCE},
		{"ORIGIN", "ORIGIN", ORIGIN},
		{"CALLER", "CALLER", CALLER},
		{"CALLVALUE", "CALLVALUE", CALLVALUE},
		{"CALLDATALOAD", "CALLDATALOAD", CALLDATALOAD},
		{"CALLDATASIZE", "CALLDATASIZE", CALLDATASIZE},
		{"CALLDATACOPY", "CALLDATACOPY", CALLDATACOPY},
		{"CHAINID", "CHAINID", CHAINID},
		{"BASEFEE", "BASEFEE", BASEFEE},
		{"BLOBHASH", "BLOBHASH", BLOBHASH},
		{"DELEGATECALL", "DELEGATECALL", DELEGATECALL},
		{"STATICCALL", "STATICCALL", STATICCALL},
		{"CODESIZE", "CODESIZE", CODESIZE},
		{"CODECOPY", "CODECOPY", CODECOPY},
		{"GASPRICE", "GASPRICE", GASPRICE},
		{"EXTCODESIZE", "EXTCODESIZE", EXTCODESIZE},
		{"EXTCODECOPY", "EXTCODECOPY", EXTCODECOPY},
		{"RETURNDATASIZE", "RETURNDATASIZE", RETURNDATASIZE},
		{"RETURNDATACOPY", "RETURNDATACOPY", RETURNDATACOPY},
		{"EXTCODEHASH", "EXTCODEHASH", EXTCODEHASH},
		{"BLOCKHASH", "BLOCKHASH", BLOCKHASH},
		{"COINBASE", "COINBASE", COINBASE},
		{"TIMESTAMP", "TIMESTAMP", TIMESTAMP},
		{"NUMBER", "NUMBER", NUMBER},
		{"DIFFICULTY", "DIFFICULTY", DIFFICULTY},
		{"GASLIMIT", "GASLIMIT", GASLIMIT},
		{"SELFBALANCE", "SELFBALANCE", SELFBALANCE},
		{"POP", "POP", POP},
		{"MLOAD", "MLOAD", MLOAD},
		{"MSTORE", "MSTORE", MSTORE},
		{"MSTORE8", "MSTORE8", MSTORE8},
		{"SLOAD", "SLOAD", SLOAD},
		{"SSTORE", "SSTORE", SSTORE},
		{"JUMP", "JUMP", JUMP},
		{"JUMPI", "JUMPI", JUMPI},
		{"PC", "PC", PC},
		{"MSIZE", "MSIZE", MSIZE},
		{"GAS", "GAS", GAS},
		{"JUMPDEST", "JUMPDEST", JUMPDEST},
		{"PUSH0", "PUSH0", PUSH0},
		{"PUSH1", "PUSH1", PUSH1},
		{"PUSH2", "PUSH2", PUSH2},
		{"PUSH3", "PUSH3", PUSH3},
		{"PUSH4", "PUSH4", PUSH4},
		{"PUSH5", "PUSH5", PUSH5},
		{"PUSH6", "PUSH6", PUSH6},
		{"PUSH7", "PUSH7", PUSH7},
		{"PUSH8", "PUSH8", PUSH8},
		{"PUSH9", "PUSH9", PUSH9},
		{"PUSH10", "PUSH10", PUSH10},
		{"PUSH11", "PUSH11", PUSH11},
		{"PUSH12", "PUSH12", PUSH12},
		{"PUSH13", "PUSH13", PUSH13},
		{"PUSH14", "PUSH14", PUSH14},
		{"PUSH15", "PUSH15", PUSH15},
		{"PUSH16", "PUSH16", PUSH16},
		{"PUSH17", "PUSH17", PUSH17},
		{"PUSH18", "PUSH18", PUSH18},
		{"PUSH19", "PUSH19", PUSH19},
		{"PUSH20", "PUSH20", PUSH20},
		{"PUSH21", "PUSH21", PUSH21},
		{"PUSH22", "PUSH22", PUSH22},
		{"PUSH23", "PUSH23", PUSH23},
		{"PUSH24", "PUSH24", PUSH24},
		{"PUSH25", "PUSH25", PUSH25},
		{"PUSH26", "PUSH26", PUSH26},
		{"PUSH27", "PUSH27", PUSH27},
		{"PUSH28", "PUSH28", PUSH28},
		{"PUSH29", "PUSH29", PUSH29},
		{"PUSH30", "PUSH30", PUSH30},
		{"PUSH31", "PUSH31", PUSH31},
		{"PUSH32", "PUSH32", PUSH32},
		{"DUP1", "DUP1", DUP1},
		{"DUP2", "DUP2", DUP2},
		{"DUP3", "DUP3", DUP3},
		{"DUP4", "DUP4", DUP4},
		{"DUP5", "DUP5", DUP5},
		{"DUP6", "DUP6", DUP6},
		{"DUP7", "DUP7", DUP7},
		{"DUP8", "DUP8", DUP8},
		{"DUP9", "DUP9", DUP9},
		{"DUP10", "DUP10", DUP10},
		{"DUP11", "DUP11", DUP11},
		{"DUP12", "DUP12", DUP12},
		{"DUP13", "DUP13", DUP13},
		{"DUP14", "DUP14", DUP14},
		{"DUP15", "DUP15", DUP15},
		{"DUP16", "DUP16", DUP16},
		{"SWAP1", "SWAP1", SWAP1},
		{"SWAP2", "SWAP2", SWAP2},
		{"SWAP3", "SWAP3", SWAP3},
		{"SWAP4", "SWAP4", SWAP4},
		{"SWAP5", "SWAP5", SWAP5},
		{"SWAP6", "SWAP6", SWAP6},
		{"SWAP7", "SWAP7", SWAP7},
		{"SWAP8", "SWAP8", SWAP8},
		{"SWAP9", "SWAP9", SWAP9},
		{"SWAP10", "SWAP10", SWAP10},
		{"SWAP11", "SWAP11", SWAP11},
		{"SWAP12", "SWAP12", SWAP12},
		{"SWAP13", "SWAP13", SWAP13},
		{"SWAP14", "SWAP14", SWAP14},
		{"SWAP15", "SWAP15", SWAP15},
		{"SWAP16", "SWAP16", SWAP16},
		{"LOG0", "LOG0", LOG0},
		{"LOG1", "LOG1", LOG1},
		{"LOG2", "LOG2", LOG2},
		{"LOG3", "LOG3", LOG3},
		{"LOG4", "LOG4", LOG4},
		{"TLOAD", "TLOAD", TLOAD},
		{"TSTORE", "TSTORE", TSTORE},
		{"CREATE", "CREATE", CREATE},
		{"CREATE2", "CREATE2", CREATE2},
		{"CALL", "CALL", CALL},
		{"RETURN", "RETURN", RETURN},
		{"CALLCODE", "CALLCODE", CALLCODE},
		{"REVERT", "REVERT", REVERT},
		{"INVALID", "INVALID", INVALID},
		{"SELFDESTRUCT", "SELFDESTRUCT", SELFDESTRUCT},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := StringToOp(tt.input)
			assert.Equal(t, tt.expected, got, "they should be equal")
		})
	}
}
