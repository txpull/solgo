package ast

import (
	"github.com/antlr4-go/antlr/v4"
	"github.com/txpull/solgo/parser"
)

// StatementNode represents a statement in Solidity.
type TokenNode struct {
	Name               string `json:"name"`
	LexerType          string `json:"lexer_type"`
	LexerTypeIndex     int    `json:"type_index"`
	Type               string `json:"type"`
	IsFunctionArgument bool   `json:"is_function_argument"`
	IsStateVariable    bool   `json:"is_state_variable"`
}

func (s *TokenNode) Children() []Node {
	// This will depend on the specific kind of statement.
	return nil
}

func getTokenTypeName(token antlr.Token) string {
	switch token.GetTokenType() {
	case parser.SolidityLexerReservedKeywords:
		return "reserved_keywords"
	case parser.SolidityLexerAbstract:
		return "abstract"
	case parser.SolidityLexerAddress:
		return "address"
	case parser.SolidityLexerAnonymous:
		return "anonymous"
	case parser.SolidityLexerAs:
		return "as"
	case parser.SolidityLexerAssembly:
		return "assembly"
	case parser.SolidityLexerBool:
		return "bool"
	case parser.SolidityLexerBreak:
		return "break"
	case parser.SolidityLexerBytes:
		return "bytes"
	case parser.SolidityLexerCalldata:
		return "calldata"
	case parser.SolidityLexerCatch:
		return "catch"
	case parser.SolidityLexerConstant:
		return "constant"
	case parser.SolidityLexerConstructor:
		return "constructor"
	case parser.SolidityLexerContinue:
		return "continue"
	case parser.SolidityLexerContract:
		return "contract"
	case parser.SolidityLexerDelete:
		return "delete"
	case parser.SolidityLexerDo:
		return "do"
	case parser.SolidityLexerElse:
		return "else"
	case parser.SolidityLexerEmit:
		return "emit"
	case parser.SolidityLexerEnum:
		return "enum"
	case parser.SolidityLexerError:
		return "error"
	case parser.SolidityLexerEvent:
		return "event"
	case parser.SolidityLexerExternal:
		return "external"
	case parser.SolidityLexerFallback:
		return "fallback"
	case parser.SolidityLexerFalse:
		return "false"
	case parser.SolidityLexerFixed:
		return "fixed"
	case parser.SolidityLexerFixedBytes:
		return "fixed_bytes"
	case parser.SolidityLexerFor:
		return "for"
	case parser.SolidityLexerFrom:
		return "from"
	case parser.SolidityLexerFunction:
		return "function"
	case parser.SolidityLexerGlobal:
		return "global"
	case parser.SolidityLexerHex:
		return "hex"
	case parser.SolidityLexerIf:
		return "if"
	case parser.SolidityLexerImmutable:
		return "immutable"
	case parser.SolidityLexerImport:
		return "import"
	case parser.SolidityLexerIndexed:
		return "indexed"
	case parser.SolidityLexerInterface:
		return "interface"
	case parser.SolidityLexerInternal:
		return "internal"
	case parser.SolidityLexerIs:
		return "is"
	case parser.SolidityLexerLibrary:
		return "library"
	case parser.SolidityLexerMapping:
		return "mapping"
	case parser.SolidityLexerMemory:
		return "memory"
	case parser.SolidityLexerModifier:
		return "modifier"
	case parser.SolidityLexerNew:
		return "new"
	case parser.SolidityLexerSubDenomination:
		return "sub_denomination"
	case parser.SolidityLexerOverride:
		return "override"
	case parser.SolidityLexerPayable:
		return "payable"
	case parser.SolidityLexerPragma:
		return "pragma"
	case parser.SolidityLexerPrivate:
		return "private"
	case parser.SolidityLexerPublic:
		return "public"
	case parser.SolidityLexerPure:
		return "pure"
	case parser.SolidityLexerReceive:
		return "receive"
	case parser.SolidityLexerReturn:
		return "return"
	case parser.SolidityLexerReturns:
		return "returns"
	case parser.SolidityLexerRevert:
		return "revert"
	case parser.SolidityLexerSignedIntegerType:
		return "signed_integer_type"
	case parser.SolidityLexerStorage:
		return "storage"
	case parser.SolidityLexerString_:
		return "string"
	case parser.SolidityLexerStruct:
		return "struct"
	case parser.SolidityLexerTrue:
		return "true"
	case parser.SolidityLexerTry:
		return "try"
	case parser.SolidityLexerType:
		return "type"
	case parser.SolidityLexerUfixed:
		return "ufixed"
	case parser.SolidityLexerUnchecked:
		return "unchecked"
	case parser.SolidityLexerUnicode:
		return "unicode"
	case parser.SolidityLexerUnsignedIntegerType:
		return "unsigned_integer_type"
	case parser.SolidityLexerUsing:
		return "using"
	case parser.SolidityLexerView:
		return "view"
	case parser.SolidityLexerVirtual:
		return "virtual"
	case parser.SolidityLexerWhile:
		return "while"
	case parser.SolidityLexerLParen:
		return "lparen"
	case parser.SolidityLexerRParen:
		return "rparen"
	case parser.SolidityLexerLBrack:
		return "lbrack"
	case parser.SolidityLexerRBrack:
		return "rbrack"
	case parser.SolidityLexerLBrace:
		return "lbrace"
	case parser.SolidityLexerRBrace:
		return "rbrace"
	case parser.SolidityLexerColon:
		return "colon"
	case parser.SolidityLexerSemicolon:
		return "semicolon"
	case parser.SolidityLexerPeriod:
		return "period"
	case parser.SolidityLexerConditional:
		return "conditional"
	case parser.SolidityLexerDoubleArrow:
		return "double_arrow"
	case parser.SolidityLexerRightArrow:
		return "right_arrow"
	case parser.SolidityLexerAssign:
		return "assign"
	case parser.SolidityLexerAssignBitOr:
		return "assign_bit_or"
	case parser.SolidityLexerAssignBitXor:
		return "assign_bit_xor"
	case parser.SolidityLexerAssignBitAnd:
		return "assign_bit_and"
	case parser.SolidityLexerAssignShl:
		return "assign_shl"
	case parser.SolidityLexerAssignSar:
		return "assign_sar"
	case parser.SolidityLexerAssignShr:
		return "assign_shr"
	case parser.SolidityLexerAssignAdd:
		return "assign_add"
	case parser.SolidityLexerAssignSub:
		return "assign_sub"
	case parser.SolidityLexerAssignMul:
		return "assign_mul"
	case parser.SolidityLexerAssignDiv:
		return "assign_div"
	case parser.SolidityLexerAssignMod:
		return "assign_mod"
	case parser.SolidityLexerComma:
		return "comma"
	case parser.SolidityLexerOr:
		return "or"
	case parser.SolidityLexerAnd:
		return "and"
	case parser.SolidityLexerBitOr:
		return "bit_or"
	case parser.SolidityLexerBitXor:
		return "bit_xor"
	case parser.SolidityLexerBitAnd:
		return "bit_and"
	case parser.SolidityLexerShl:
		return "shl"
	case parser.SolidityLexerSar:
		return "sar"
	case parser.SolidityLexerShr:
		return "shr"
	case parser.SolidityLexerAdd:
		return "add"
	case parser.SolidityLexerSub:
		return "sub"
	case parser.SolidityLexerMul:
		return "mul"
	case parser.SolidityLexerDiv:
		return "div"
	case parser.SolidityLexerMod:
		return "mod"
	case parser.SolidityLexerExp:
		return "exp"
	case parser.SolidityLexerEqual:
		return "equal"
	case parser.SolidityLexerNotEqual:
		return "not_equal"
	case parser.SolidityLexerLessThan:
		return "less_than"
	case parser.SolidityLexerGreaterThan:
		return "greater_than"
	case parser.SolidityLexerLessThanOrEqual:
		return "less_than_or_equal"
	case parser.SolidityLexerGreaterThanOrEqual:
		return "greater_than_or_equal"
	case parser.SolidityLexerNot:
		return "not"
	case parser.SolidityLexerBitNot:
		return "bit_not"
	case parser.SolidityLexerInc:
		return "inc"
	case parser.SolidityLexerDec:
		return "dec"
	case parser.SolidityLexerDoubleQuote:
		return "double_quote"
	case parser.SolidityLexerSingleQuote:
		return "single_quote"
	case parser.SolidityLexerNonEmptyStringLiteral:
		return "non_empty_string_literal"
	case parser.SolidityLexerEmptyStringLiteral:
		return "empty_string_literal"
	case parser.SolidityLexerUnicodeStringLiteral:
		return "unicode_string_literal"
	case parser.SolidityLexerHexString:
		return "hex_string"
	case parser.SolidityLexerHexNumber:
		return "hex_number"
	case parser.SolidityLexerOctalNumber:
		return "octal_number"
	case parser.SolidityLexerDecimalNumber:
		return "decimal_number"
	case parser.SolidityLexerDecimalNumberFollowedByIdentifier:
		return "decimal_number_followed_by_identifier"
	case parser.SolidityLexerIdentifier:
		return "identifier"
	case parser.SolidityLexerWS:
		return "ws"
	case parser.SolidityLexerCOMMENT:
		return "comment"
	case parser.SolidityLexerLINE_COMMENT:
		return "line_comment"
	case parser.SolidityLexerAssemblyDialect:
		return "assembly_dialect"
	case parser.SolidityLexerAssemblyLBrace:
		return "assembly_lbrace"
	case parser.SolidityLexerAssemblyFlagString:
		return "assembly_flag_string"
	case parser.SolidityLexerAssemblyBlockLParen:
		return "assembly_block_lparen"
	case parser.SolidityLexerAssemblyBlockRParen:
		return "assembly_block_rparen"
	case parser.SolidityLexerAssemblyBlockComma:
		return "assembly_block_comma"
	case parser.SolidityLexerAssemblyBlockWS:
		return "assembly_block_ws"
	case parser.SolidityLexerAssemblyBlockCOMMENT:
		return "assembly_block_comment"
	case parser.SolidityLexerAssemblyBlockLINE_COMMENT:
		return "assembly_block_line_comment"
	case parser.SolidityLexerYulBreak:
		return "yul_break"
	case parser.SolidityLexerYulCase:
		return "yul_case"
	case parser.SolidityLexerYulContinue:
		return "yul_continue"
	case parser.SolidityLexerYulDefault:
		return "yul_default"
	case parser.SolidityLexerYulFalse:
		return "yul_false"
	case parser.SolidityLexerYulFor:
		return "yul_for"
	case parser.SolidityLexerYulFunction:
		return "yul_function"
	case parser.SolidityLexerYulIf:
		return "yul_if"
	case parser.SolidityLexerYulLeave:
		return "yul_leave"
	case parser.SolidityLexerYulLet:
		return "yul_let"
	case parser.SolidityLexerYulSwitch:
		return "yul_switch"
	case parser.SolidityLexerYulTrue:
		return "yul_true"
	case parser.SolidityLexerYulHex:
		return "yul_hex"
	case parser.SolidityLexerYulEVMBuiltin:
		return "yul_evm_builtin"
	case parser.SolidityLexerYulLBrace:
		return "yul_lbrace"
	case parser.SolidityLexerYulRBrace:
		return "yul_rbrace"
	case parser.SolidityLexerYulLParen:
		return "yul_lparen"
	case parser.SolidityLexerYulRParen:
		return "yul_rparen"
	case parser.SolidityLexerYulAssign:
		return "yul_assign"
	case parser.SolidityLexerYulPeriod:
		return "yul_period"
	case parser.SolidityLexerYulComma:
		return "yul_comma"
	case parser.SolidityLexerYulArrow:
		return "yul_arrow"
	case parser.SolidityLexerYulIdentifier:
		return "yul_identifier"
	case parser.SolidityLexerYulHexNumber:
		return "yul_hex_number"
	case parser.SolidityLexerYulDecimalNumber:
		return "yul_decimal_number"
	case parser.SolidityLexerYulStringLiteral:
		return "yul_string_literal"
	case parser.SolidityLexerYulHexStringLiteral:
		return "yul_hex_string_literal"
	case parser.SolidityLexerYulWS:
		return "yul_ws"
	case parser.SolidityLexerYulCOMMENT:
		return "yul_comment"
	case parser.SolidityLexerYulLINE_COMMENT:
		return "yul_line_comment"
	case parser.SolidityLexerPragmaToken:
		return "pragma_token"
	case parser.SolidityLexerPragmaSemicolon:
		return "pragma_semicolon"
	case parser.SolidityLexerPragmaWS:
		return "pragma_ws"
	case parser.SolidityLexerPragmaCOMMENT:
		return "pragma_comment"
	case parser.SolidityLexerPragmaLINE_COMMENT:
		return "pragma_line_comment"
	default:
		return "Unknown"
	}
}
